!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@angular/material"),require("rxjs/Subject"),require("@angular/cdk/coercion")):"function"==typeof define&&define.amd?define(["exports","@angular/core","@angular/forms","@angular/material","rxjs/Subject","@angular/cdk/coercion"],t):t(e["ngx-mat-codemirror"]={},e.ng.core,e.ng.forms,e.ng.material,e.Rx,e.ng.cdk.coercion)}(this,function(e,i,t,r,n,s){"use strict";var o=function(){function o(e,t,r){this.ngControl=e,this._differs=t,this._ngZone=r,this.stateChanges=new n.Subject,this.id="mat-codemirror-component-"+o.materialId++,this.describedBy="",this.onChange=function(e){return null},this.onTouched=function(){return null},this._required=!1,this._focused=!1,this._disabled=!1,this._value="",this.ngxMatCodemirror=!0,this.className="",this.name="codemirror",this.autoFocus=!1,this.preserveScrollPosition=!1,this.cursorActivity=new i.EventEmitter,this.focusChange=new i.EventEmitter,this.scroll=new i.EventEmitter,null!=this.ngControl&&(this.ngControl.valueAccessor=this)}return Object.defineProperty(o.prototype,"shouldLabelFloat",{get:function(){return this.focused||!this.empty},enumerable:!0,configurable:!0}),o.prototype.setDescribedByIds=function(e){this.describedBy=e.join(" ")},o.prototype.onContainerClick=function(e){},Object.defineProperty(o.prototype,"required",{get:function(){return this._required},set:function(e){this._required=s.coerceBooleanProperty(e),this.stateChanges.next()},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"errorState",{get:function(){return this.ngControl&&!this.ngControl.pristine&&!this.ngControl.valid},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"placeholder",{get:function(){return this._placeholder},set:function(e){this._placeholder=e,this.stateChanges.next()},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"empty",{get:function(){return!this.value},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"value",{get:function(){return this._value},set:function(e){this._value=e,this.updateLineNumbers(),this.stateChanges.next()},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"disabled",{get:function(){return this._disabled},set:function(e){this._disabled=s.coerceBooleanProperty(e),this.stateChanges.next()},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"focused",{get:function(){return this._focused},set:function(e){this._focused=e,this.stateChanges.next()},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"options",{set:function(e){this._options=e,!this._differ&&e&&(this._differ=this._differs.find(e).create())},enumerable:!0,configurable:!0}),o.prototype.ngAfterViewInit=function(){var e=this;if(this.ref){var t=require("codemirror").fromTextArea;this.codeMirror=t(this.ref.nativeElement,this._options),this.updateLineNumbers(),this._ngZone.runOutsideAngular(function(){e.codeMirror.on("change",e.codemirrorValueChanged.bind(e)),e.codeMirror.on("cursorActivity",e.cursorActive.bind(e)),e.codeMirror.on("focus",e.focusChanged.bind(e,!0)),e.codeMirror.on("blur",e.focusChanged.bind(e,!1)),e.codeMirror.on("scroll",e.scrollChanged.bind(e))}),this.codeMirror.setValue(this.value)}},o.prototype.ngDoCheck=function(){var t=this;if(this._differ){var e=this._differ.diff(this._options);e&&(e.forEachChangedItem(function(e){return t.setOptionIfChanged(e.key,e.currentValue)}),e.forEachAddedItem(function(e){return t.setOptionIfChanged(e.key,e.currentValue)}),e.forEachRemovedItem(function(e){return t.setOptionIfChanged(e.key,e.currentValue)}))}},o.prototype.ngOnDestroy=function(){this.codeMirror&&this.codeMirror.toTextArea(),this.stateChanges.complete()},o.prototype.codemirrorValueChanged=function(e,t){"setValue"!==t.origin&&(this.value=e.getValue(),this.writeValue(e.getValue()))},o.prototype.setOptionIfChanged=function(e,t){this.codeMirror&&this.codeMirror.setOption(e,t)},o.prototype.focusChanged=function(e){this.onTouched(),this.focused=e,this.focusChange.emit(e)},o.prototype.scrollChanged=function(e){this.scroll.emit(e.getScrollInfo())},o.prototype.cursorActive=function(e){this.cursorActivity.emit(e)},o.prototype.writeValue=function(e){if(null!==e)if(!e||this.codeMirror)if(e&&e!==this.codeMirror.getValue()&&this.normalizeLineEndings(this.codeMirror.getValue())!==this.normalizeLineEndings(e)){if(this.value=e,this.preserveScrollPosition){var t=this.codeMirror.getScrollInfo();return this.codeMirror.setValue(this.value),void this.codeMirror.scrollTo(t.left,t.top)}this.codeMirror.setValue(this.value)}else this.onChange(this.value);else this.value=e},o.prototype.registerOnChange=function(e){this.onChange=e},o.prototype.registerOnTouched=function(e){this.onTouched=e},o.prototype.setDisabledState=function(e){this.disabled=e,this.setOptionIfChanged("readOnly",this.disabled)},o.prototype.normalizeLineEndings=function(e){return(e||"").replace(/\r\n|\r/g,"\n")},o.prototype.updateLineNumbers=function(){this.codeMirror&&this.codeMirror.setOption("lineNumbers",!!/\n/.test(this._value))},o}();o.materialId=0,o.decorators=[{type:i.Component,args:[{selector:"mat-codemirror",template:'<textarea\n  [name]="name"\n  class="ngx-codemirror {{ className }}"\n  [class.ngx-codemirror--focused]="focused"\n  autocomplete="off"\n  [autofocus]="autoFocus"\n  #ref>\n</textarea>\n',styles:[".ngx-mat-codemirror .CodeMirror{height:auto}.ngx-mat-codemirror .CodeMirror-scroll{max-height:250px}"],providers:[{provide:r.MatFormFieldControl,useExisting:o}],preserveWhitespaces:!1,changeDetection:i.ChangeDetectionStrategy.OnPush,encapsulation:i.ViewEncapsulation.None}]}],o.ctorParameters=function(){return[{type:t.NgControl,decorators:[{type:i.Optional},{type:i.Self}]},{type:i.KeyValueDiffers},{type:i.NgZone}]},o.propDecorators={id:[{type:i.HostBinding}],describedBy:[{type:i.HostBinding,args:["attr.aria-describedby"]}],ngxMatCodemirror:[{type:i.HostBinding,args:["class.ngx-mat-codemirror"]}],className:[{type:i.Input}],name:[{type:i.Input}],autoFocus:[{type:i.Input}],preserveScrollPosition:[{type:i.Input}],cursorActivity:[{type:i.Output}],focusChange:[{type:i.Output}],scroll:[{type:i.Output}],ref:[{type:i.ViewChild,args:["ref"]}],shouldLabelFloat:[{type:i.HostBinding,args:["class.floating"]}],required:[{type:i.Input}],placeholder:[{type:i.Input}],disabled:[{type:i.Input}],options:[{type:i.Input}]};var a=function(){};a.decorators=[{type:i.NgModule,args:[{declarations:[o],exports:[o]}]}],a.ctorParameters=function(){return[]},e.MatCodemirrorModule=a,e.Éµa=o,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-mat-codemirror.umd.min.js.map
