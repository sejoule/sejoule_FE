/// <reference types="codemirror" />
import { AfterViewInit, DoCheck, ElementRef, EventEmitter, KeyValueDiffers, NgZone, OnDestroy } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { Editor, EditorChangeLinkedList, EditorFromTextArea, ScrollInfo } from 'codemirror';
import { MatFormFieldControl } from '@angular/material';
import { Subject } from 'rxjs/Subject';
export declare class MatCodemirrorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<string>, DoCheck {
    ngControl: NgControl;
    private _differs;
    private _ngZone;
    private static materialId;
    stateChanges: Subject<void>;
    id: string;
    describedBy: string;
    private onChange;
    private onTouched;
    private _required;
    private _focused;
    private _disabled;
    private _placeholder;
    private _value;
    private _differ;
    private _options;
    private ngxMatCodemirror;
    className: string;
    name: string;
    autoFocus: boolean;
    preserveScrollPosition: boolean;
    cursorActivity: EventEmitter<Editor>;
    focusChange: EventEmitter<boolean>;
    scroll: EventEmitter<ScrollInfo>;
    ref: ElementRef;
    codeMirror: EditorFromTextArea;
    constructor(ngControl: NgControl, _differs: KeyValueDiffers, _ngZone: NgZone);
    readonly shouldLabelFloat: boolean;
    setDescribedByIds(ids: string[]): void;
    onContainerClick(event: MouseEvent): void;
    required: boolean;
    readonly errorState: boolean;
    placeholder: string;
    readonly empty: boolean;
    value: string;
    disabled: boolean;
    focused: boolean;
    /**
     * set options for codemirror
     * @link http://codemirror.net/doc/manual.html#config
     */
    options: {
        [key: string]: any;
    };
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    codemirrorValueChanged(cm: Editor, change: EditorChangeLinkedList): void;
    setOptionIfChanged(optionName: string, newValue: any): void;
    focusChanged(focused: boolean): void;
    scrollChanged(cm: Editor): void;
    cursorActive(cm: Editor): void;
    writeValue(value: string): void;
    registerOnChange(fn: (value: string) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    private normalizeLineEndings(str);
    private updateLineNumbers();
}
