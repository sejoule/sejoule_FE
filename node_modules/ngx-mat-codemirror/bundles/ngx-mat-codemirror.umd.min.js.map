{
  "version": 3,
  "file": "ngx-mat-codemirror.umd.min.js",
  "sources": [
    "ng://ngx-mat-codemirror/out/src/app/mat-codemirror/mat-codemirror.component.ts",
    "ng://ngx-mat-codemirror/out/src/app/mat-codemirror/mat-codemirror.module.ts"
  ],
  "sourcesContent": [
    "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { Editor, EditorChangeLinkedList, EditorFromTextArea, ScrollInfo, } from 'codemirror';\nimport { MatFormFieldControl } from '@angular/material';\nimport { Subject } from 'rxjs/Subject';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'mat-codemirror',\n  template: `<textarea\n  [name]=\"name\"\n  class=\"ngx-codemirror {{ className }}\"\n  [class.ngx-codemirror--focused]=\"focused\"\n  autocomplete=\"off\"\n  [autofocus]=\"autoFocus\"\n  #ref>\n</textarea>\n`,\n  styles: [`.ngx-mat-codemirror .CodeMirror{height:auto}.ngx-mat-codemirror .CodeMirror-scroll{max-height:250px}`],\n  providers: [\n    {\n      provide: MatFormFieldControl,\n      useExisting: MatCodemirrorComponent\n    }\n  ],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatCodemirrorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<string>, DoCheck {\n\n  private static materialId = 0;\n\n  stateChanges = new Subject<void>();\n\n  @HostBinding() id = `mat-codemirror-component-${ MatCodemirrorComponent.materialId++ }`;\n\n  @HostBinding('attr.aria-describedby') describedBy = '';\n\n  private onChange = (_: string) => null;\n  private onTouched = () => null;\n\n  private _required = false;\n  private _focused = false;\n  private _disabled = false;\n  private _placeholder: string;\n  private _value = '';\n\n  private _differ: KeyValueDiffer<string, any>;\n  private _options: any;\n\n  @HostBinding('class.ngx-mat-codemirror') private ngxMatCodemirror = true;\n\n  /* class applied to the created textarea */\n  @Input() className = '';\n  /* name applied to the created textarea */\n  @Input() name = 'codemirror';\n  /* autofocus setting applied to the created textarea */\n  @Input() autoFocus = false;\n\n  /* preserve previous scroll position after updating value */\n  @Input() preserveScrollPosition = false;\n  /* called when the text cursor is moved */\n  @Output() cursorActivity = new EventEmitter<Editor>();\n  /* called when the editor is focused or loses focus */\n  @Output() focusChange = new EventEmitter<boolean>();\n  /* called when the editor is scrolled */\n  @Output() scroll = new EventEmitter<ScrollInfo>();\n\n  @ViewChild('ref') ref: ElementRef;\n\n  codeMirror: EditorFromTextArea;\n\n  constructor(\n    @Optional() @Self() public ngControl: NgControl, // mat\n    private _differs: KeyValueDiffers,\n    private _ngZone: NgZone\n  ) {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  onContainerClick(event: MouseEvent) {}\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  get errorState() {\n    return this.ngControl && !this.ngControl.pristine && !this.ngControl.valid;\n  }\n\n  @Input()\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n\n  get empty() {\n    return !this.value;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: string) {\n    this._value = value;\n    this.updateLineNumbers();\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(dis) {\n    this._disabled = coerceBooleanProperty(dis);\n    this.stateChanges.next();\n  }\n\n  get focused() {\n    return this._focused;\n  }\n\n  set focused(val) {\n    this._focused = val;\n    this.stateChanges.next();\n  }\n\n  /**\n   * set options for codemirror\n   * @link http://codemirror.net/doc/manual.html#config\n   */\n  @Input()\n  set options(value: { [key: string]: any }) {\n    this._options = value;\n    if (!this._differ && value) {\n      this._differ = this._differs.find(value).create();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this.ref) {\n      return;\n    }\n    // in order to allow for universal rendering, we import Codemirror runtime with `require` to prevent node errors\n    const {fromTextArea} = require('codemirror');\n\n    this.codeMirror = fromTextArea(this.ref.nativeElement, this._options);\n    this.updateLineNumbers();\n    this._ngZone.runOutsideAngular(() => {\n      this.codeMirror.on('change', this.codemirrorValueChanged.bind(this));\n      this.codeMirror.on('cursorActivity', this.cursorActive.bind(this));\n      this.codeMirror.on('focus', this.focusChanged.bind(this, true));\n      this.codeMirror.on('blur', this.focusChanged.bind(this, false));\n      this.codeMirror.on('scroll', this.scrollChanged.bind(this));\n    });\n    this.codeMirror.setValue(this.value);\n  }\n\n  ngDoCheck() {\n    if (this._differ) {\n      // check options have not changed\n      const changes = this._differ.diff(this._options);\n      if (changes) {\n        changes.forEachChangedItem(option =>\n          this.setOptionIfChanged(option.key, option.currentValue),\n        );\n        changes.forEachAddedItem(option =>\n          this.setOptionIfChanged(option.key, option.currentValue),\n        );\n        changes.forEachRemovedItem(option =>\n          this.setOptionIfChanged(option.key, option.currentValue),\n        );\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    // is there a lighter-weight way to remove the cm instance?\n    if (this.codeMirror) {\n      this.codeMirror.toTextArea();\n    }\n\n    this.stateChanges.complete();\n  }\n\n  codemirrorValueChanged(cm: Editor, change: EditorChangeLinkedList) {\n    if (change.origin !== 'setValue') {\n      this.value = cm.getValue();\n      this.writeValue(cm.getValue());\n    }\n  }\n\n  setOptionIfChanged(optionName: string, newValue: any) {\n    if (!this.codeMirror) {\n      return;\n    }\n    this.codeMirror.setOption(optionName, newValue);\n  }\n\n  focusChanged(focused: boolean) {\n    this.onTouched();\n    this.focused = focused;\n    this.focusChange.emit(focused);\n  }\n\n  scrollChanged(cm: Editor) {\n    this.scroll.emit(cm.getScrollInfo());\n  }\n\n  cursorActive(cm: Editor) {\n    this.cursorActivity.emit(cm);\n  }\n\n  writeValue(value: string): void {\n    if (value === null) {\n      return;\n    }\n    if (value && !this.codeMirror) {\n      this.value = value;\n      return;\n    }\n    if (\n      value &&\n      value !== this.codeMirror.getValue() &&\n      this.normalizeLineEndings(this.codeMirror.getValue()) !==\n      this.normalizeLineEndings(value)\n    ) {\n      this.value = value;\n      if (this.preserveScrollPosition) {\n        const prevScrollPosition = this.codeMirror.getScrollInfo();\n        this.codeMirror.setValue(this.value);\n        this.codeMirror.scrollTo(\n          prevScrollPosition.left,\n          prevScrollPosition.top,\n        );\n        return;\n      }\n      this.codeMirror.setValue(this.value);\n      // Don't call onChange value is from ngModel\n      return;\n    }\n    this.onChange(this.value);\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.setOptionIfChanged('readOnly', this.disabled);\n  }\n\n  private normalizeLineEndings(str: string) {\n    return (str || '').replace(/\\r\\n|\\r/g, '\\n');\n  }\n\n  private updateLineNumbers() {\n    if (this.codeMirror) {\n      this.codeMirror.setOption('lineNumbers', !!/\\n/.test(this._value));\n    }\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { MatCodemirrorComponent } from './mat-codemirror.component';\n\n@NgModule({\n  declarations: [\n    MatCodemirrorComponent,\n  ],\n  exports: [\n    MatCodemirrorComponent,\n  ]\n})\nexport class MatCodemirrorModule {\n}\n"
  ],
  "names": [
    "MatCodemirrorComponent",
    "ngControl",
    "_differs",
    "_ngZone",
    "this",
    "stateChanges",
    "Subject",
    "id",
    "materialId",
    "describedBy",
    "onChange",
    "_",
    "onTouched",
    "_required",
    "_focused",
    "_disabled",
    "_value",
    "ngxMatCodemirror",
    "className",
    "name",
    "autoFocus",
    "preserveScrollPosition",
    "cursorActivity",
    "EventEmitter",
    "focusChange",
    "scroll",
    "valueAccessor",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "focused",
    "empty",
    "setDescribedByIds",
    "ids",
    "join",
    "onContainerClick",
    "event",
    "set",
    "req",
    "coerceBooleanProperty",
    "next",
    "pristine",
    "valid",
    "_placeholder",
    "plh",
    "value",
    "updateLineNumbers",
    "dis",
    "val",
    "_options",
    "_differ",
    "find",
    "create",
    "ngAfterViewInit",
    "_this",
    "ref",
    "fromTextArea",
    "require",
    "codeMirror",
    "nativeElement",
    "runOutsideAngular",
    "on",
    "codemirrorValueChanged",
    "bind",
    "cursorActive",
    "focusChanged",
    "scrollChanged",
    "setValue",
    "ngDoCheck",
    "changes",
    "diff",
    "forEachChangedItem",
    "option",
    "setOptionIfChanged",
    "key",
    "currentValue",
    "forEachAddedItem",
    "forEachRemovedItem",
    "ngOnDestroy",
    "toTextArea",
    "complete",
    "cm",
    "change",
    "origin",
    "getValue",
    "writeValue",
    "optionName",
    "newValue",
    "setOption",
    "emit",
    "getScrollInfo",
    "normalizeLineEndings",
    "prevScrollPosition",
    "scrollTo",
    "left",
    "top",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "setDisabledState",
    "isDisabled",
    "disabled",
    "str",
    "replace",
    "test",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "providers",
    "provide",
    "MatFormFieldControl",
    "useExisting",
    "preserveWhitespaces",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "NgControl",
    "decorators",
    "Optional",
    "Self",
    "KeyValueDiffers",
    "NgZone",
    "HostBinding",
    "Input",
    "Output",
    "ViewChild",
    "shouldLabelFloat",
    "required",
    "placeholder",
    "options",
    "MatCodemirrorModule",
    "NgModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
